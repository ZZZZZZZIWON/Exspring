<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 이 파일이 담고 있는 SQL문들 집합의 고유한 이름을 namespace 속성값으로 설정 -->
<!-- 일반적으로 이 SQL문들을 실행할 때 사용할 DAO인터페이스 이름을 지정 -->

<mapper namespace="com.exam.member.MemberDao">
	<!-- resultMap을 사용하여 조회결과의 어떤 컬럼값을 MemberVo 객체의 어떤 속성(변수)에 담을지(저장) 설정 -->
	<!-- mem_id라는 테이블을 자바에서 memId로 별칭해서 쓰겠다는 의미 -->
	<!-- 기본키(PK)에 해당되는 column에 대해서는 result 대신 id 태그 사용 -->
	<resultMap type="com.exam.myapp.member.MemberVo" id="MemberMap">
	<!-- id를 지정해서 밑에 쿼리문에 연결 -->
		<id property="memId" column="mem_id" /> <!-- 하나의 테이블에서는 result로 해도 ok -->
		<!-- but 두 개의 테이블을 조인할 때는 pk인 column을 꼭 id로 지정해줘야 함 -->
		<result property="memPass" column="mem_pass" />
		<result property="memName" column="mem_name" />
		<result property="memPoint" column="mem_point" />
		<!-- resultMap을 밑에서 연결해줘야 함 -->
		<!-- 자바에서는 자동으로 mapping해주는 기능이 존재 -->
	</resultMap>
	<!-- 어떤 AS에 어떤 정보를 담아야할지 정의하는 것 -->
	
	<!-- 등록할 SQL문과 동일한 이름의 태그를 사용하여 SQL을 등록 -->
	<!-- 이 파일 내에서 해당 SQL문의 고유한 이름을 id 속성값으로 설정 -->
	<!-- 일반적으로 이 SQL문을 실행할 때 사용할 DAO인터페이스의 메서드 이름을 -->
	<!-- select 실행 결과의 한 행(row)를 담을 객체의 클래스명을 resultType 속성에 지정-->
	 <select id="selectMemberList" resultType="MemberVo" >
	 <!-- 별칭을 mybatis-config.xml에 저장해놨기 때문에 MemberVo로 사용 가능 -->
	 <!-- 받아올 데이터 타입(MemberVo)을 resultType에 지정 -->
	
	<!--  <select id="selectMemberList" resultMap="MemberMap"> -->
		<!-- MemberMap이라는 id가 가리키는 resultMap을 불러옴 -->
		SELECT mem_id,  mem_name, mem_point FROM MEMBER ORDER BY mem_id 
		<!-- 별명을 붙이지 않고도 할 수 있는 방법 O -> resultmap 이용하기-->
		<!--  일일히 별명을 붙여주고나 resultmap으로 이용하기 -->
		<!--  단순하게 표기법만 다를 때, mapUnderscoreToCamelCase만 활성화시켜주면 자동으로 반영 -->
		
	</select>
	
	<!-- SQL문 실행시 전달받는 데이터의 타입을 parameterType 속성에 지정 가능(생략도 가능) -->
	<!-- 명시적으로 받아올 parameterType을 지정  -->
	<insert id="insertMember" parameterType="com.exam.myapp.member.MemberVo"> 
	<!-- id에는 memberDao에 있는 메소드 이름과 동일하게 설정 -->
	<!-- parameterType을 속성으로 지정 가능(option) -->
	
	INSERT INTO MEMBER( MEM_ID, MEM_PASS, MEM_NAME, MEM_POINT) VALUES(#{memId}, #{memPass}, #{memName}, #{memPoint})
	<!-- ?에 들어갈 인자를 줘야 함 -->
	</insert>
	<!-- 파라미터(인자)로 받은 객체의 속성(변수)값들을 SQL문 내에서 사용하기 위해서, -->
	<!-- #{속성명} 또는 ${속셩명} 표현을 사용 -->
	<!-- #{속성명} : JDBC의 ? 채우기와 같은 방식으로 동작 -->
	<!-- ${속성명} : 문자열 이어붙이기 방식으로 동작 (보안상 위험 -> 가급적 사용 자제) -->
	<!-- (+vo.getMemId()+vo.getMemPass()+)로 이어붙이면 악성SQL문이 들어갈 위험이 있음 -->
	<!-- 보안상 확실한 정보일떄만 사용하지만 가급적 사용X -->


	<delete id="deleteMember" parameterType="java.lang.String">
	<!-- String class가 담겨있는 package 기입 -->
	<!-- 기본 데이터 타입이나 String class는 많이 사용되기 때문에 package에 대한 별칭을 제공함 java.lang.String -->
	<!-- 등록할 SQL문과 동일한 이름의 태그를 사용하여 SQL을 등록해야 spring 구현할 때 편함 -->
	<!--  -->
		DELETE FROM MEMBER WHERE MEM_ID = #{memId)}
	
		<!-- 문자열, 정수 등 단일값을 갖는 데이터를 파라미터(인자)로 받은 경우 -->
		<!-- #{속성명}의 속성명에는 어떤 이름을 써도 상관X -->
		<!-- 일반적으로 value 또는 변수명(memId)을 사용 -->
		<!-- 넣을 값이 하나밖에 없기 때문에 -->
		<!-- MemberVo객체를 가진 insert는 정확하게 기입해줘야 함(클래스에는 member가 여러개이기때문에) -->
	</delete>
	
	<select id="selectMember" resultType="MemberVo" >
	
		SELECT mem_id, mem_name, mem_point FROM MEMBER 
		WHERE mem_id = #{memId}		
	
	</select>
	
	<update id="updateMember" parameterType="MemberVo">
	
		UPDATE MEMBER 
		SET mem_name = #{memName},
			mem_point = #{memPoint}
		WHERE mem_id = #{memId}		
		
	</update>
	
	<select id="selectLogin" resultType="MemberVo">
	
		SELECT mem_id, mem_name, mem_point
		FROM MEMBER
		WHERE mem_id = #{memId} AND mem_pass = #{memPass}
		
	</select>
</mapper>